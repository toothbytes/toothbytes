
package components;

import java.io.File;
import java.io.IOException;
import java.sql.SQLException;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import net.proteanit.sql.DbUtils;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.design.JRDesignQuery;
import net.sf.jasperreports.engine.design.JasperDesign;
import net.sf.jasperreports.engine.xml.JRXmlLoader;
import net.sf.jasperreports.view.JasperViewer;
import org.hsqldb.jdbc.JDBCConnection;
import org.hsqldb.jdbc.JDBCDriver;
import org.hsqldb.jdbc.JDBCResultSet;
import org.hsqldb.jdbc.JDBCStatement;

/**
 *
 * @author USER
 */
public class ReportsGen extends javax.swing.JPanel {
    
    /*Connection conn = null;
    ResultSet rs = null;
    PreparedStatement ps = null;*/
    
    private static JDBCConnection conn = null;
    private static JDBCResultSet rs = null;
    private static JDBCStatement stmt = null;
    private static String dir = "data/db";
    
    String selectedButton = "";
    String selelectedIncomeType = "";
    
    /**
     * Creates new form GenerateReport
     */
    public ReportsGen() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        selectRB = new javax.swing.ButtonGroup();
        patientList = new javax.swing.JRadioButton();
        patientWBal = new javax.swing.JRadioButton();
        jLabel1 = new javax.swing.JLabel();
        incomePerMonth = new javax.swing.JRadioButton();
        jLabel2 = new javax.swing.JLabel();
        perMonthCB = new javax.swing.JComboBox();
        incomePerYear = new javax.swing.JRadioButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        perYearFrom = new javax.swing.JComboBox();
        perYearTo = new javax.swing.JComboBox();
        showIncomeWithChart = new javax.swing.JButton();
        patientCountPerMonth = new javax.swing.JRadioButton();
        jLabel5 = new javax.swing.JLabel();
        patientPerMonthM = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        patientPerMonthY = new javax.swing.JComboBox();
        showPatientPerMonth = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        resultSetTable = new javax.swing.JTable();
        saveButton = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));
        setForeground(new java.awt.Color(255, 255, 255));
        setPreferredSize(new java.awt.Dimension(970, 520));

        patientList.setBackground(new java.awt.Color(255, 255, 255));
        selectRB.add(patientList);
        patientList.setText("Patient List");
        patientList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patientListActionPerformed(evt);
            }
        });

        patientWBal.setBackground(new java.awt.Color(255, 255, 255));
        selectRB.add(patientWBal);
        patientWBal.setText("Patient with balances");
        patientWBal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patientWBalActionPerformed(evt);
            }
        });

        jLabel1.setText("INCOME");

        incomePerMonth.setBackground(new java.awt.Color(255, 255, 255));
        selectRB.add(incomePerMonth);
        incomePerMonth.setText("Income per month");
        incomePerMonth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                incomePerMonthActionPerformed(evt);
            }
        });

        jLabel2.setText("Year :");

        perMonthCB.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "2015", "2014", "2013", " " }));
        perMonthCB.setEnabled(false);

        incomePerYear.setBackground(new java.awt.Color(255, 255, 255));
        selectRB.add(incomePerYear);
        incomePerYear.setText("Income per year");
        incomePerYear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                incomePerYearActionPerformed(evt);
            }
        });

        jLabel3.setText("From :");

        jLabel4.setText("To :");

        perYearFrom.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "2015", "2014", "2013" }));
        perYearFrom.setEnabled(false);

        perYearTo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "2015", "2014", "2013" }));
        perYearTo.setEnabled(false);

        showIncomeWithChart.setText("Show");
        showIncomeWithChart.setEnabled(false);
        showIncomeWithChart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showIncomeWithChartActionPerformed(evt);
            }
        });

        patientCountPerMonth.setBackground(new java.awt.Color(255, 255, 255));
        selectRB.add(patientCountPerMonth);
        patientCountPerMonth.setText("Patient per month");
        patientCountPerMonth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patientCountPerMonthActionPerformed(evt);
            }
        });

        jLabel5.setText("Month :");

        patientPerMonthM.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" }));
        patientPerMonthM.setEnabled(false);

        jLabel6.setText("Year :");

        patientPerMonthY.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "2015", "2014", "2013" }));
        patientPerMonthY.setEnabled(false);

        showPatientPerMonth.setText("Show");
        showPatientPerMonth.setEnabled(false);
        showPatientPerMonth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showPatientPerMonthActionPerformed(evt);
            }
        });

        resultSetTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        resultSetTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                resultSetTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(resultSetTable);

        saveButton.setText("Preview Report");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(patientCountPerMonth)
                            .addComponent(incomePerYear)
                            .addComponent(incomePerMonth)
                            .addComponent(jLabel1)
                            .addComponent(patientWBal)
                            .addComponent(patientList)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(21, 21, 21)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(perYearFrom, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(perMonthCB, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel4)
                                        .addGap(18, 18, 18)
                                        .addComponent(perYearTo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(showIncomeWithChart)
                                        .addGroup(layout.createSequentialGroup()
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(jLabel5)
                                                .addComponent(jLabel6))
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                .addComponent(patientPerMonthM, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(showPatientPerMonth)
                                                .addComponent(patientPerMonthY, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 789, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(saveButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(patientList)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(patientWBal)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(incomePerMonth)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(perMonthCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(incomePerYear)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(perYearFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(perYearTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(showIncomeWithChart)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(patientCountPerMonth)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(patientPerMonthM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(patientPerMonthY, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(showPatientPerMonth)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 464, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(saveButton)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void patientListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patientListActionPerformed
        selectedButton = "Patient List";
        perMonthCB.setEnabled(false);
        perYearFrom.setEnabled(false);
        perYearTo.setEnabled(false);
        showIncomeWithChart.setEnabled(false);
        patientPerMonthM.setEnabled(false);
        patientPerMonthY.setEnabled(false);
        showPatientPerMonth.setEnabled(false);
        try{
            Class.forName("org.hsqldb.jdbcDriver");
            String dbConn = "jdbc:hsqldb:file:"+dir+";user=root";
            conn = (JDBCConnection) JDBCDriver.getConnection(dbConn, null);
            stmt = (JDBCStatement) conn.createStatement();
            rs = (JDBCResultSet) stmt.executeQuery("SELECT patientID, CONCAT(patient_LastName, ',', patient_FirstName, ' ', patient_MiddleInitial, '.') AS \"PATIENT NAME\",\n" +
                "gender, cellNo, homeAddress, emailAddress FROM patient\n" +
                "ORDER BY patientID ASC;");
            //rs = (JDBCResultSet) stmt.executeQuery("SELECT * FROM ACCOUNTS");
            resultSetTable.setModel(DbUtils.resultSetToTableModel(rs));
        }catch(ClassNotFoundException | SQLException error){
            JOptionPane.showMessageDialog(null, error);
        }
    }//GEN-LAST:event_patientListActionPerformed

    private void patientWBalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patientWBalActionPerformed
        selectedButton = "Patients with balances";
        perMonthCB.setEnabled(false);
        perYearFrom.setEnabled(false);
        perYearTo.setEnabled(false);
        patientPerMonthM.setEnabled(false);
        patientPerMonthY.setEnabled(false);
        showPatientPerMonth.setEnabled(false);
        showIncomeWithChart.setEnabled(false);
        try{
            Class.forName("org.hsqldb.jdbcDriver");
            String dbConn = "jdbc:hsqldb:file:"+dir+";user=root";
            conn = (JDBCConnection) JDBCDriver.getConnection(dbConn, null);
            stmt = (JDBCStatement) conn.createStatement();
            rs = (JDBCResultSet) stmt.executeQuery("SELECT patientID, CONCAT(patient_LastName, ',', patient_FirstName, ' ', patient_MiddleInitial, '.') AS \"PATIENT NAME\", dental_records.treatmentDate, dental_records.procedure, balance FROM dental_records\n" +
                "JOIN patient ON dental_records.patientID = patient.patientID\n" +
                "JOIN payments ON dental_records.dentalRecordID = payments.dentalRecordID\n" +
                "WHERE balance > 0\n" +
                "ORDER BY patient.patientID ASC, patient.patient_LastName DESC;");            
            resultSetTable.setModel(DbUtils.resultSetToTableModel(rs));
        }catch(ClassNotFoundException | SQLException error){
            JOptionPane.showMessageDialog(null, error);
        }
    }//GEN-LAST:event_patientWBalActionPerformed

    private void incomePerMonthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_incomePerMonthActionPerformed
        selelectedIncomeType = "Income Per Month";
        selectedButton = "Income Per Month";
        perMonthCB.setEnabled(true);
        perYearFrom.setEnabled(false);
        perYearTo.setEnabled(false);
        showIncomeWithChart.setEnabled(true);
        patientPerMonthM.setEnabled(false);
        patientPerMonthY.setEnabled(false);
        showPatientPerMonth.setEnabled(false);
    }//GEN-LAST:event_incomePerMonthActionPerformed

    private void incomePerYearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_incomePerYearActionPerformed
        selelectedIncomeType = "Income Per Year";
        selectedButton = "Income Per Year";
        perYearFrom.setEnabled(true);
        perYearTo.setEnabled(true);
        perMonthCB.setEnabled(false);
        showIncomeWithChart.setEnabled(true);
        patientPerMonthM.setEnabled(false);
        patientPerMonthY.setEnabled(false);
        showPatientPerMonth.setEnabled(false);
    }//GEN-LAST:event_incomePerYearActionPerformed

    private void showIncomeWithChartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showIncomeWithChartActionPerformed
        if(selelectedIncomeType == null){
            JOptionPane.showMessageDialog(null, "Choose what to save/print.");
        }else{
            switch(selelectedIncomeType){
                case "Income Per Month": {
                    String year = perMonthCB.getSelectedItem().toString();
                    try{                        
                        Class.forName("org.hsqldb.jdbcDriver");
                        String dbConn = "jdbc:hsqldb:file:"+dir+";user=root";
                        conn = (JDBCConnection) JDBCDriver.getConnection(dbConn, null);
                        stmt = (JDBCStatement) conn.createStatement();                        
                        rs = (JDBCResultSet) stmt.executeQuery("SELECT YEAR(paymentDate) AS \"YEAR\", MONTHNAME(paymentDate) AS \"MONTH\", dp.procedure, pay.amountPaid AS \"AMOUNT PAID\" FROM payments pay\n" +
                                "JOIN dental_records dp ON pay.dentalRecordID = dp.dentalRecordID\n" +
                                "WHERE YEAR(paymentDate) ="+year+"\n" +
                                "GROUP BY YEAR(paymentDate), MONTHNAME(paymentDate), dp.procedure, pay.amountPaid");
                        resultSetTable.setModel(DbUtils.resultSetToTableModel(rs));
                    }catch(ClassNotFoundException | SQLException error){
                        JOptionPane.showMessageDialog(null, error);
                    }
                    break;
                }
                case "Income Per Year": {
                    String yearFrom = perYearFrom.getSelectedItem().toString();
                    String yearTo = perYearTo.getSelectedItem().toString();
                    try{
                        Class.forName("org.hsqldb.jdbcDriver");
                        String dbConn = "jdbc:hsqldb:file:"+dir+";user=root";
                        conn = (JDBCConnection) JDBCDriver.getConnection(dbConn, null);
                        stmt = (JDBCStatement) conn.createStatement();
                        rs = (JDBCResultSet) stmt.executeQuery("SELECT dp.procedure, YEAR(paymentDate) AS \"YEAR\", MONTHNAME(paymentDate) AS \"MONTH\", pay.amountPaid AS \"AMOUNT PAID\" FROM payments pay\n" +
                            "JOIN dental_records dp ON pay.dentalRecordID = dp.dentalRecordID\n" +
                            "WHERE YEAR(paymentDate) >= "+yearFrom+" AND YEAR(paymentDate) <= "+yearTo+"\n"+
                            "GROUP BY dp.procedure, YEAR(pay.paymentDate), MONTHNAME(pay.paymentDate), pay.amountPaid");
                            
                        resultSetTable.setModel(DbUtils.resultSetToTableModel(rs));
                    }catch(ClassNotFoundException | SQLException error){
                        JOptionPane.showMessageDialog(null, error);
                    }
                    break;
                }
            }
        }
    }//GEN-LAST:event_showIncomeWithChartActionPerformed

    private void patientCountPerMonthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patientCountPerMonthActionPerformed
        selectedButton = "Patient Count";
        patientPerMonthM.setEnabled(true);
        patientPerMonthY.setEnabled(true);
        showPatientPerMonth.setEnabled(true);
        perMonthCB.setEnabled(false);
        perYearFrom.setEnabled(false);
        perYearTo.setEnabled(false);
        showIncomeWithChart.setEnabled(false);
    }//GEN-LAST:event_patientCountPerMonthActionPerformed

    private void showPatientPerMonthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showPatientPerMonthActionPerformed
        try{
            String month = patientPerMonthM.getSelectedItem().toString();
            String year = patientPerMonthY.getSelectedItem().toString();
            Class.forName("org.hsqldb.jdbcDriver");
            String dbConn = "jdbc:hsqldb:file:"+dir+";user=root";
            conn = (JDBCConnection) JDBCDriver.getConnection(dbConn, null);
            stmt = (JDBCStatement) conn.createStatement();            
            rs = (JDBCResultSet) stmt.executeQuery("SELECT MONTHNAME(treatmentDate) AS \"MONTH\", YEAR(treatmentDate)  AS \"YEAR\", treatmentDate,  CONCAT(patient_LastName, ',', ' ', patient_FirstName, \n" +
                    "' ', patient_MiddleInitial, '.') AS \"PATIENT NAME\" FROM patient p\n" +
                    "JOIN dental_records d ON p.patientID = d.patientID\n" +
                    "WHERE MONTHNAME(treatmentDate) = '"+month+"' AND YEAR(treatmentDate) ="+year+"\n" +
                    "GROUP BY treatmentDate,CONCAT(patient_LastName, ',', ' ', patient_FirstName, \n" +
                    "' ', patient_MiddleInitial, '.')");
            resultSetTable.setModel(DbUtils.resultSetToTableModel(rs));
        }catch(ClassNotFoundException | SQLException error){
            JOptionPane.showMessageDialog(null, error);
        }
    }//GEN-LAST:event_showPatientPerMonthActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        if(selectedButton == null){
                JOptionPane.showMessageDialog(null, "Choose what to save/print.");
            }else{
                switch(selectedButton){
                    case "Patient List": {
                        try{                            
                            Class.forName("org.hsqldb.jdbcDriver");
                            String dbConn = "jdbc:hsqldb:file:"+dir+";user=root";
                            conn = (JDBCConnection) JDBCDriver.getConnection(dbConn, null);
                            File path = new File("Reports/list of patients.jrxml");
                            String reportPath = path.getCanonicalPath();
                            JasperReport jrCompile = JasperCompileManager.compileReport(reportPath);
                            JasperPrint jpPrint = JasperFillManager.fillReport(jrCompile, null, conn);
                            JasperViewer.viewReport(jpPrint, false);
                            conn.close();
                        }catch(ClassNotFoundException | SQLException | IOException | JRException error){
                            JOptionPane.showMessageDialog(null,error);
                        }
                        break;
                        }
                    case "Patients with balances": {
                        try{
                            Class.forName("org.hsqldb.jdbcDriver");
                            String dbConn = "jdbc:hsqldb:file:"+dir+";user=root";
                            conn = (JDBCConnection) JDBCDriver.getConnection(dbConn, null);
                            File path = new File("Reports/pwBalances.jrxml");
                            String reportPath = path.getCanonicalPath();
                            JasperReport jrCompile = JasperCompileManager.compileReport(reportPath);
                            JasperPrint jpPrint = JasperFillManager.fillReport(jrCompile, null, conn);
                            JasperViewer.viewReport(jpPrint, false);
                            conn.close();
                        }catch(IOException | ClassNotFoundException | SQLException | JRException error){
                            JOptionPane.showMessageDialog(null,error);
                        }
                        break;
                        }
                    case "Income Per Month": {
                        String year = perMonthCB.getSelectedItem().toString();
                        try{
                            Class.forName("org.hsqldb.jdbcDriver");
                            String dbConn = "jdbc:hsqldb:file:"+dir+";user=root";
                            conn = (JDBCConnection) JDBCDriver.getConnection(dbConn, null);
                            File path = new File("Reports/MonthlyIncome.jrxml");
                            String reportPath = path.getCanonicalPath();
                            JasperDesign jd = JRXmlLoader.load(reportPath);
                            String sql = "SELECT YEAR(paymentDate) AS \"YEAR\", MONTHNAME(paymentDate) AS \"MONTH\", paymentDate AS \"DATE OF PAYMENT\", dp.procedure, pay.amountPaid AS \"AMOUNT PAID\" FROM payments pay\n" +
                                        "JOIN dental_records dp ON pay.dentalRecordID = dp.dentalRecordID\n" +
                                        "WHERE YEAR(paymentDate) ="+year+"\n" +
                                        "GROUP BY YEAR(paymentDate), MONTHNAME(paymentDate), paymentDate, dp.procedure, amountPaid";
                            JRDesignQuery newQuery = new JRDesignQuery();
                            newQuery.setText(sql);
                            jd.setQuery(newQuery);
                            JasperReport jrCompile = JasperCompileManager.compileReport(jd);
                            JasperPrint jpPrint = JasperFillManager.fillReport(jrCompile, null, conn);
                            JasperViewer.viewReport(jpPrint, false);
                            conn.close();
                        }catch(IOException | ClassNotFoundException | SQLException | JRException error){
                            JOptionPane.showMessageDialog(null,error);
                        }
                        break;
                        }
                    case "Income Per Year": {
                        String yearFrom = perYearFrom.getSelectedItem().toString();
                        String yearTo = perYearTo.getSelectedItem().toString();
                        try{
                            Class.forName("org.hsqldb.jdbcDriver");
                            String dbConn = "jdbc:hsqldb:file:"+dir+";user=root";
                            conn = (JDBCConnection) JDBCDriver.getConnection(dbConn, null);
                            File path = new File("Reports/YearlyIncome.jrxml");
                            String reportPath = path.getCanonicalPath();
                            JasperDesign jd = JRXmlLoader.load(reportPath);
                            String sql = "SELECT dp.procedure, YEAR(paymentDate) AS \"YEAR\", MONTHNAME(paymentDate) AS \"MONTH\", paymentDate AS \"DATE OF PAYMENT\", pay.amountPaid AS \"AMOUNT PAID\" FROM payments pay\n" +
                                        "JOIN dental_records dp ON pay.dentalRecordID = dp.dentalRecordID\n" +
                                        "WHERE YEAR(pay.paymentDate) >= "+yearFrom+" AND YEAR(pay.paymentDate) <= "+yearTo+"\n" +
                                        "GROUP BY dp.procedure, YEAR(pay.paymentDate), MONTHNAME(pay.paymentDate), paymentDate, pay.amountPaid";                                      
                            JRDesignQuery newQuery = new JRDesignQuery();
                            newQuery.setText(sql);
                            jd.setQuery(newQuery);
                            JasperReport jrCompile = JasperCompileManager.compileReport(jd);
                            JasperPrint jpPrint = JasperFillManager.fillReport(jrCompile, null, conn);
                            JasperViewer.viewReport(jpPrint, false);
                            conn.close();
                        }catch(IOException | ClassNotFoundException | SQLException | JRException error){
                            JOptionPane.showMessageDialog(null,error);
                        }
                        break;
                        }
                    case "Patient Count": {
                        String month = patientPerMonthM.getSelectedItem().toString();
                        String year = patientPerMonthY.getSelectedItem().toString();
                        try{
                            Class.forName("org.hsqldb.jdbcDriver");
                            String dbConn = "jdbc:hsqldb:file:"+dir+";user=root";
                            conn = (JDBCConnection) JDBCDriver.getConnection(dbConn, null);
                            File path = new File("Reports/patientCountMonthly.jrxml");
                            String reportPath = path.getCanonicalPath();
                            JasperDesign jd = JRXmlLoader.load(reportPath);
                            String sql = "SELECT MONTHNAME(treatmentDate) AS \"MONTH\", YEAR(treatmentDate) AS \"YEAR\", treatmentDate,  CONCAT(patient_LastName, ',', ' ', patient_FirstName, \n" +
                                        "' ', patient_MiddleInitial, '.') AS \"PATIENT NAME\" FROM patient p\n" +
                                        "JOIN dental_records d ON p.patientID = d.patientID\n" +
                                        "WHERE MONTHNAME(treatmentDate) = '"+month+"' AND YEAR(treatmentDate) = "+year+"\n" +
                                        "GROUP BY treatmentDate,CONCAT(patient_LastName, ',', ' ', patient_FirstName, \n" +
                                        "' ', patient_MiddleInitial, '.')";                                          
                            JRDesignQuery newQuery = new JRDesignQuery();
                            newQuery.setText(sql);
                            jd.setQuery(newQuery);
                            JasperReport jrCompile = JasperCompileManager.compileReport(jd);
                            JasperPrint jpPrint = JasperFillManager.fillReport(jrCompile, null, conn);
                            JasperViewer.viewReport(jpPrint, false);
                            conn.close();
                        }catch(IOException | ClassNotFoundException | SQLException | JRException error){
                            JOptionPane.showMessageDialog(null,error);
                        }
                        break;
                        }
                    default: {
                        JOptionPane.showMessageDialog(null, "Error");
                        break;
                    }
                }
            }
    }//GEN-LAST:event_saveButtonActionPerformed

    private void resultSetTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_resultSetTableMouseClicked
        if(selectedButton == "Patient List" || selectedButton == "Patients with balances"){
            evt.getButton();
            JPopupMenu menu = new JPopupMenu("Popup");
            menu.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseEntered(java.awt.event.MouseEvent evt) {
                }
            });
            JMenuItem menuItem1 = new JMenuItem("Print Patient Records");
            menuItem1.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mousePressed(java.awt.event.MouseEvent evt) {
                    int row = resultSetTable.getSelectedRow();
                    String id = String.valueOf(resultSetTable.getModel().getValueAt(row, 0));
                    try{
                        Class.forName("org.hsqldb.jdbcDriver");
                        String dbConn = "jdbc:hsqldb:file:"+dir+";user=root";
                        conn = (JDBCConnection) JDBCDriver.getConnection(dbConn, null);
                        File path = new File("Reports/patientRecords.jrxml");
                        String reportPath = path.getCanonicalPath();
                        JasperDesign jd = JRXmlLoader.load(reportPath);
                        String sql = "SELECT patientPhoto, CONCAT(pa.patient_FirstName, ' ', pa.patient_MiddleInitial, '.', ' ', pa.patient_LastName) AS \"PATIENT NAME\", nickname, gender, birthdate, occupation, civilStatus, cellNo, homeNo, officeNo, faxNo, emailAddress, homeAddress, treatmentDate, procedure, amountCharged, balance  FROM patient pa\n" +
                                    "JOIN dental_records dr ON pa.patientID = dr.patientID\n" +
                                    "JOIN payments py ON dr.dentalRecordID = py.dentalRecordID\n" +
                                    "WHERE patientID = "+id;                                          
                        JRDesignQuery newQuery = new JRDesignQuery();
                        newQuery.setText(sql);
                        jd.setQuery(newQuery);
                        JasperReport jrCompile = JasperCompileManager.compileReport(jd);
                        JasperPrint jpPrint = JasperFillManager.fillReport(jrCompile, null, conn);
                        JasperViewer.viewReport(jpPrint, false);
                        conn.close();
                    }catch(IOException | ClassNotFoundException | SQLException | JRException error){
                        JOptionPane.showMessageDialog(null,error);
                    }
                }
            });
            menu.add(menuItem1);
            if(evt.getButton() == 3){
                menu.show(evt.getComponent(), evt.getX(), evt.getY());
                menu.setVisible(true);
            }
            evt.consume();
        }
    }//GEN-LAST:event_resultSetTableMouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton incomePerMonth;
    private javax.swing.JRadioButton incomePerYear;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JRadioButton patientCountPerMonth;
    private javax.swing.JRadioButton patientList;
    private javax.swing.JComboBox patientPerMonthM;
    private javax.swing.JComboBox patientPerMonthY;
    private javax.swing.JRadioButton patientWBal;
    private javax.swing.JComboBox perMonthCB;
    private javax.swing.JComboBox perYearFrom;
    private javax.swing.JComboBox perYearTo;
    private javax.swing.JTable resultSetTable;
    private javax.swing.JButton saveButton;
    private javax.swing.ButtonGroup selectRB;
    private javax.swing.JButton showIncomeWithChart;
    private javax.swing.JButton showPatientPerMonth;
    // End of variables declaration//GEN-END:variables
}
